#!/bin/bash
set -e

ERR()
{
    rm -f $O
}

TO_SOURCE_FILE=$HOME/.ssec2

if [ ! -z "$SSEC2_PROFILE" ]; then
    echo $SSEC2_PROFILE
    TO_SOURCE_FILE=$HOME/.ssec2.$SSEC2_PROFILE
fi

if [ -f $TO_SOURCE_FILE ]; then
    source $TO_SOURCE_FILE
else
    echo "$TO_SOURCE_FILE not found"
    exit 1
fi


trap ERR EXIT

THIS_PATH="`dirname \"$0\"`"
THIS_PATH="`( cd \"$THIS_PATH\" && pwd )`" 

usage()
{
    cat << EOF

usage: $0 OPTIONS

OPTIONS can be:
    -h      Show this message
    -l      Get full listing
    -i      Instance ID
    -k      SSH key path (default $KEY_PATH)
    -r      Region (default $AMI_REGION)
    -u      User name (default $AMI_USER_NAME)
    -f      secure copy local file to instance
    -F      secure copy remote file freom instance
    -c      run a remote command
    -t      Terminate instance
    -T      Terminate all instances
    -s      Stop instance
EOF
}

TIME=10
TERM_I=0
TERM_ALL=0
STOP_I=0
INSTANCE=
LIST=0
LOCAL_FILE=
REMOTE_FILE=
REMOTE_CMD=

# Check options passed in.
while getopts "h i:k:r:u:tsTlf:F:c:" OPTION
do
    case $OPTION in
        h)
            usage
            exit 1
            ;;
        c)
            REMOTE_CMD=$OPTARG
            ;;
        i)
            INSTANCE=$OPTARG
            ;;
        k)
            KEY_LOCATION=$OPTARG
            ;;
        r)
            AMI_REGION=$OPTARG
            ;;
        u)
            AMI_USER_NAME=$OPTARG
            ;;
        f)
            LOCAL_FILE=$OPTARG
            ;;
        F)
            REMOTE_FILE=$OPTARG
            ;;
        t)
            TERM_I=1
            ;;
        s)
            STOP_I=1
            ;;
        l)
            LIST=1
            ;;
        T)
            TERM_ALL=1
            ;;
        ?)
            usage
            exit
            ;;
    esac
done

O=ssec2C.$RANDOM.out
AWS_ACCESS_KEY_ID=$DATA_STORE_KEY_ID \
AWS_SECRET_ACCESS_KEY=$DATA_STORE_ACCESS_KEY \
aws ec2 describe-instances --region $AMI_REGION > $O

if [ "$TERM_ALL" -eq "1" ]
then
    INSTANCES=`cat $O | jq -r ".Reservations[].Instances[] | select(.State.Name == \"running\") | .InstanceId" | tr '\n' ' '`
    CMD="AWS_ACCESS_KEY_ID=$DATA_STORE_KEY_ID \
        AWS_SECRET_ACCESS_KEY=$DATA_STORE_ACCESS_KEY \
        aws ec2 terminate-instances --instance-ids $INSTANCES --region $AMI_REGION"
    eval $CMD 
elif [ "$LIST" -eq "1" ]
then
    THEN=
    NOW=
    
    if [ "`uname`" == "Linux" ]
    then
        THEN=$(date -u --date "-$TIME minutes" "+%Y-%m-%dT%H:%M:%SUTC")
        NOW=$(date -u "+%Y-%m-%dT%H:%M:%SUTC")
    else
        THEN=$(date -u -j -r $((`date -u +%s`-$TIME*60)) "+%Y-%m-%dT%H:%M:%SUTC")
        NOW=$(date -u -j -r $(date -u +%s) "+%Y-%m-%dT%H:%M:%SUTC")
    fi

    if [ ! -z "$INSTANCE" ]
    then
        cat $O | jq ".Reservations[].Instances[] |  select(.InstanceId == \"$INSTANCE\")"
    else
        JR_Q=".Reservations[].Instances[] | select(.State.Name != \"terminated\") | .InstanceId + \",\" + .LaunchTime + \",\" + .State.Name + \",\" + .PublicDnsName + \",\" + .InstanceType"
        printf "%-15s %-15s %-15s %-15s %-10s\n" "ID" "Launch Time" "State" "Type" "CPU"
        for INSTANCE_STATE_STR in `cat $O | jq -r "$JR_Q"`
        do
            IFS=',' read -r -a INSTANCE_STATE <<< "$INSTANCE_STATE_STR"
            printf "%-15s %-15s %-15s %-10s " "${INSTANCE_STATE[0]}" "${INSTANCE_STATE[1]}" "${INSTANCE_STATE[2]}" "${INSTANCE_STATE[4]}"

            CPU="."
            if [ "${INSTANCE_STATE[2]}" == "running" ]
            then
                INSTANCE="${INSTANCE_STATE[0]}"
                CPU=`AWS_ACCESS_KEY_ID=$DATA_STORE_KEY_ID \
                    AWS_SECRET_ACCESS_KEY=$DATA_STORE_ACCESS_KEY \
                    aws cloudwatch get-metric-statistics \
                    --namespace "AWS/EC2" \
                    --metric-name CPUUtilization \
                    --region $AMI_REGION \
                    --dimensions Name=InstanceId,Value=$INSTANCE \
                    --start-time $THEN \
                    --end-time $NOW \
                    --statistics Average \
                    --period 60  | jq '.Datapoints[].Average' 2>/dev/null \
                    | awk '{x+=$0;y+=$0^2}END{if (NR>0) print x/NR}'`
            fi

            printf "%-10s\n" "$CPU"
        done
    fi
elif [ ! -z "$INSTANCE" ]
then
    CMD="AWS_ACCESS_KEY_ID=$DATA_STORE_KEY_ID \
AWS_SECRET_ACCESS_KEY=$DATA_STORE_ACCESS_KEY \
"
    JR_Q=
    
    if [ "$TERM_I" -eq "1" ]
    then
        CMD+="aws ec2 terminate-instances --instance-ids $INSTANCE --region $AMI_REGION"
        JRQ=".TerminatingInstances[] | .InstanceId + \" \" + .PreviousState + \"->\" + .CurrentState"
    elif [ "$STOP_I" -eq "1" ]
    then
        CMD+="aws ec2 stop-instances --instance-ids $INSTANCE --region $AMI_REGION"
    elif [ ! -z "$LOCAL_FILE" ]
    then
        CMD=`cat $O \
            | jq ".Reservations[].Instances[] | select(.InstanceId == \"$INSTANCE\")" \
            | jq -r "\"scp -o StrictHostKeyChecking=no -i $KEY_PATH/\" + .KeyName + \".pem $LOCAL_FILE $AMI_USER_NAME@\" + .PublicDnsName + \":.\""`
    elif [ ! -z "$REMOTE_FILE" ]
    then
        CMD=`cat $O \
            | jq ".Reservations[].Instances[] | select(.InstanceId == \"$INSTANCE\")" \
            | jq -r "\"scp -o StrictHostKeyChecking=no -i $KEY_PATH/\" + .KeyName + \".pem $AMI_USER_NAME@\" + .PublicDnsName + \":$REMOTE_FILE .\""`
    else
        CMD=`cat $O \
            | jq ".Reservations[].Instances[] | select(.InstanceId == \"$INSTANCE\")" \
            | jq -r "\"ssh -o StrictHostKeyChecking=no -i $KEY_PATH/\" + .KeyName + \".pem $AMI_USER_NAME@\" + .PublicDnsName"`

        echo $CMD

        if [ ! -z "$REMOTE_CMD" ]
        then
            CMD+=" \"$REMOTE_CMD\""
        fi
    fi
    eval $CMD
    rm $O
else 
    printf "%s\t%s\n" "$AMI_REGION" "$(date)"
    printf "\nInstances\n"

    #printf "Running "
    #JR_Q=".Reservations[].Instances[] | select(.State.Name == \"running\") | .InstanceId "
    #printf "%s\n" "$(cat $O | jq -r "$JR_Q" | wc -l)"

    #printf "Pending "
    #JR_Q=".Reservations[].Instances[] | select(.State.Name == \"pending\") | .InstanceId "
    #printf "%s\n" "$(cat $O | jq -r "$JR_Q" | wc -l)"

    JR_Q=".Reservations[].Instances[].State.Name"
    cat $O | jq -r "$JR_Q" | sort | uniq -c 

    printf "\nSpot Requests\n"
    AWS_ACCESS_KEY_ID=$DATA_STORE_KEY_ID \
    AWS_SECRET_ACCESS_KEY=$DATA_STORE_ACCESS_KEY \
    aws ec2 describe-spot-instance-requests --region $AMI_REGION > $O
    JR_Q=".SpotInstanceRequests[].Status.Code"
    cat $O | jq -r "$JR_Q" | sort | uniq -c 
fi
